<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:x="urn:schemas-microsoft-com:office:excel"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Excel.Sheet>
<meta name=Generator content="Microsoft Excel 14">
<link id=Main-File rel=Main-File href="../PythonAPIReference.htm">
<link rel=File-List href=filelist.xml>
<link rel=Stylesheet href=stylesheet.css>
<style>
<!--table
	{mso-displayed-decimal-separator:"\.";
	mso-displayed-thousand-separator:"\,";}
@page
	{margin:.75in .71in .75in .71in;
	mso-header-margin:.31in;
	mso-footer-margin:.31in;}
ruby
	{ruby-align:left;}
rt
	{color:windowtext;
	font-size:6.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:"ＭＳ Ｐゴシック", monospace;
	mso-font-charset:128;
	mso-char-type:katakana;
	display:none;}
-->
</style>
<![if !supportTabStrip]><script language="JavaScript">
<!--
function fnUpdateTabs()
 {
  if (parent.window.g_iIEVer>=4) {
   if (parent.document.readyState=="complete"
    && parent.frames['frTabs'].document.readyState=="complete")
   parent.fnSetActiveSheet(1);
  else
   window.setTimeout("fnUpdateTabs();",150);
 }
}

if (window.name!="frSheet")
 window.location.replace("../PythonAPIReference.htm");
else
 fnUpdateTabs();
//-->
</script>
<![endif]>
</head>

<body link="#0563C1" vlink="#954F72" class=xl73>

<table border=0 cellpadding=0 cellspacing=0 width=1537 style='border-collapse:
 collapse;table-layout:fixed;width:1154pt'>
 <col class=xl73 width=126 style='mso-width-source:userset;mso-width-alt:4032;
 width:95pt'>
 <col class=xl73 width=434 style='mso-width-source:userset;mso-width-alt:13888;
 width:326pt'>
 <col class=xl73 width=454 style='mso-width-source:userset;mso-width-alt:14528;
 width:341pt'>
 <col class=xl73 width=523 style='mso-width-source:userset;mso-width-alt:16736;
 width:392pt'>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl72 width=126 style='height:13.5pt;width:95pt'>class</td>
  <td class=xl72 width=434 style='border-left:none;width:326pt'>method</td>
  <td class=xl72 width=454 style='border-left:none;width:341pt'>description</td>
  <td class=xl72 width=523 style='border-left:none;width:392pt'>the correspond
  C client API</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl70 width=126 style='height:40.5pt;border-top:none;
  width:95pt'>AggregationResult</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>long
  get_long()<br>
    float get_double()<br>
    GSTimestamp get_timestamp()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the aggregation result as the value with specified type</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSBool
  gsGetAggregationValue (GSAggregationResult *aggregationResult, void *value,
  GSType valueType)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td rowspan=23 height=828 class=xl80 width=126 style='border-bottom:.5pt solid black;
  height:621.0pt;border-top:none;width:95pt'>Container</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>void
  create_index(string columnName, GSIndexTypeFlags indexType)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Creates
  a specified type of index on the specified Column</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsCreateIndex (GSContainer *container, const GSChar *columnName,
  GSIndexTypeFlags flags)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void drop_index(string columName,
  GSIndexTypeFlags indexType)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Removes
  the specified type of index among indexes on the specified Column</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDropIndex (GSContainer *container, const GSChar *columnName,
  GSIndexTypeFlags flags)</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl70 width=434 style='height:40.5pt;border-top:none;
  border-left:none;width:326pt'>void flush()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Writes
  the results of earlier updates to a non-volatile storage medium, such as SSD,
  so as to prevent the data loss even if all cluster nodes stop suddenly</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsFlush (GSContainer *container)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean put_row(Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRow (GSContainer *container, const void *key, const void *rowObj, GSBool
  *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>Query query(string queryString)</td>
  <td class=xl74 width=454 style='border-left:none;width:341pt'>Creates a query
  to execute the specified TQL statement</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsQuery (GSContainer *container, const GSChar *queryString, GSQuery **query)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>GSContainerType get_type()</td>
  <td class=xl70 width=454 style='border-left:none;width:341pt'>Return the type
  of specified Container</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetContainerType (GSContainer *container, GSContainerType *type)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>Row create_row()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Create
  a new Row object based on the column layout of specified Container</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsCreateRowByContainer (GSContainer *container, GSRow **row)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void abort()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Rolls
  back the result of the current transaction and starts a new transaction in
  the manual commit mode</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsAbort (GSContainer *container)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void commit()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Commits
  the result of the current transaction and start a new transaction in the
  manual commit mode</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsCommit (GSContainer *container)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>void set_auto_commit(boolean enabled)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Change
  the setting of the commit mode</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetAutoCommit (GSContainer *container, GSBool enabled)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean get_row_by_integer(int key, boolean
  forUpdate, Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the content of a Row corresponding to the INTEGER-type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowByInteger (GSContainer *container, int32_t key, void *rowObj, GSBool
  forUpdate, GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean get_row_by_long(long key, boolean
  forUpdate, Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the content of a Row corresponding to the LONG-type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowByLong (GSContainer *container, int64_t key, void *rowObj, GSBool
  forUpdate, GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean get_row_by_timestamp(GSTimestamp key,
  boolean forUpdate, Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the content of a Row corresponding to the TIMESTAMP-type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowByTimestamp (GSContainer *container, GSTimestamp key, void *rowObj,
  GSBool forUpdate, GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean get_row_by_string(string key, boolean
  forUpdate, Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the content of a Row corresponding to the STRING-type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowByString (GSContainer *container, const GSChar *key, void *rowObj,
  GSBool forUpdate, GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean put_row_by_integer(int key, Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row by specifying the INTEGER type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRowByInteger (GSContainer *container, int32_t key, const void *rowObj,
  GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean put_row_by_long(long key, Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row by specifying the LONG type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRowByLong (GSContainer *container, int64_t key, const void *rowObj,
  GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean put_row_by_timestamp(GSTimestamp key,
  Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row by specifying the TIMESTAMP type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRowByTimestamp (GSContainer *container, GSTimestamp key, const void
  *rowObj, GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean put_row_by_string(string key, Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row by specifying the STRING type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRowByString (GSContainer *container, const GSChar *key, const void
  *rowObj, GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean delete_row_by_integer(int key)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  a Row corresponding to the INTEGER-type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteRowByInteger (GSContainer *container, int32_t key, GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean delete_row_by_long(long key)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  a Row corresponding to the LONG-type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteRowByLong (GSContainer *container, int64_t key, GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean delete_row_by_timestamp(GSTimestamp
  key)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  a Row corresponding to the TIMESTAMP-type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteRowByTimestamp (GSContainer *container, GSTimestamp key, GSBool
  *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean delete_row_by_string(string key)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  a Row corresponding to the STRING-type Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteRowByString (GSContainer *container, const GSChar *key, GSBool
  *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean put_multi_row(list rowList)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates an arbitrary number of Rows together based on the specified Row
  objects group</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutMultipleRows (GSContainer *container, const void *const *rowObjs, size_t
  rowCount, GSBool *exists)</td>
 </tr>
 <tr height=72 style='height:54.0pt'>
  <td height=72 class=xl70 width=126 style='height:54.0pt;border-top:none;
  width:95pt'>GSException</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>boolean
  is_timeout()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>This
  function can be used to determine whether the result of the requested process
  shows the error code corresponding to the error that occurred when the
  requested process is not completed within a predetermined time</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSBool
  gsIsTimeoutError (GSResult result)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td rowspan=4 height=162 class=xl80 width=126 style='border-bottom:.5pt solid black;
  height:121.5pt;border-top:none;width:95pt'>PartitionController</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>int
  get_partition_count()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  the number of partitions in the target GridDB cluster</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionCount (GSPartitionController *controller, int32_t
  *partitionCount)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>long get_partition_container_count(int
  partitionIndex)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  the total number of containers belonging to a specified partition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionContainerCount (GSPartitionController *controller, int32_t
  partitionIndex, int64_t *containerCount)</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl70 width=434 style='height:40.5pt;border-top:none;
  border-left:none;width:326pt'>void get_partition_container_names(int
  partitionIndex, long start, long limit,<span style='mso-spacerun:yes'> 
  </span>string containerName)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  a list of the Container names belonging to a specified partition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionContainerNames (GSPartitionController *controller, int32_t
  partitionIndex, int64_t start, const int64_t *limit, const GSChar *const
  **nameList, size_t *size)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>int get_partition_index_of_container(string
  containerName)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  the partition index corresponding to the specified Container name</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionIndexOfContainer (GSPartitionController *controller, const
  GSChar *containerName, int32_t *partitionIndex)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td rowspan=3 height=108 class=xl80 width=126 style='border-bottom:.5pt solid black;
  height:81.0pt;border-top:none;width:95pt'>Query</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>RowSet
  fetch(boolean forUpdate)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Executes
  a specified query with the specified option and returns a set of Rows as an
  execution result</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsFetch (GSQuery *query, GSBool forUpdate, GSRowSet **rowSet)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>RowSet get_row_set()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  RowSet as the latest result</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowSet (GSQuery *query, GSRowSet **rowSet)</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl70 width=434 style='height:40.5pt;border-top:none;
  border-left:none;width:326pt'>void set_fetch_option_integer(GSFetchOption
  fetchOption, int value)<br>
    void set_fetch_option_long(GSFetchOption fetchOption, long value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  an fetch option for a result acquisition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetFetchOption (GSQuery *query, GSFetchOption fetchOption, const void
  *value, GSType valueType)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td rowspan=4 height=126 class=xl80 width=126 style='border-bottom:.5pt solid black;
  height:94.5pt;border-top:none;width:95pt'>Resource</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>int
  get_error_stack_size()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the stack size of last error information related to specified resource</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>size_t
  gsGetErrorStackSize (void *gsResource)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>GSResult get_error_code(int stackIndex)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the error code of last error related to specified resource</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetErrorCode (void *gsResource, size_t stackIndex)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>string format_error_message(int stackIndex, int
  bufSize)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the message of last error related to specified resource</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>size_t
  gsFormatErrorMessage (void *gsResource, size_t stackIndex, GSChar *strBuf,
  size_t bufSize)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>string format_error_location(int stackIndex,
  int bufSize)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the error location of the internal module to the message of last error
  related to specified resource</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>size_t
  gsFormatErrorLocation (void *gsResource, size_t stackIndex, GSChar *strBuf,
  size_t bufSize)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td rowspan=21 height=648 class=xl80 width=126 style='border-bottom:.5pt solid black;
  height:486.0pt;border-top:none;width:95pt'>Row</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>void
  set_field_by_string(int column, string value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the STRING-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByString (GSRow *row, int32_t column, const GSChar *fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>String get_field_as_string(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the STRING-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsString (GSRow *row, int32_t column, const GSChar **fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_bool(int column, boolean
  value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the BOOL-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByBool (GSRow *row, int32_t column, GSBool fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean get_field _as_bool(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the BOOL-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsBool (GSRow *row, int32_t column, GSBool *fieldValue)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_byte(int column, int value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the BYTE-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GsResult
  gsSetRowFieldByByte (GSRow *row, int32_t column, int8_t fieldValue)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>int get_field _as_byte(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the BYTE-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsByte (GSRow *row, int32_t column, int8_t *fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_short(int column, int value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the SHORT-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByShort (GSRow *row, int32_t column, int16_t fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>int get_field _as_short(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the SHORT-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsShort (GSRow *row, int32_t column, int16_t *fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_integer(int column, int
  value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the INTEGER-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByInteger (GSRow *row, int32_t column, int32_t fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>int get_field _as_integer(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the INTEGER-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsInteger (GSRow *row, int32_t column, int32_t *fieldValue)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_long(int column, long value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the LONG-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByLong (GSRow *row, int32_t column, int64_t fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>long get_field _as_long(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the LONG-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsLong (GSRow *row, int32_t column, int64_t *fieldValue)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_float(int column, float
  value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the FLOAT-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByFloat (GSRow *row, int32_t column, float fieldValue)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>float get_field_as_float(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the FLOAT-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsFloat (GSRow *row, int32_t column, float *fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_double(int column, float
  value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the DOUBLE-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByDouble (GSRow *row, int32_t column, double fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>float get_field_as_double(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the DOUBLE-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsDouble (GSRow *row, int32_t column, double *fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_timestamp (int column,
  GSTimestamp value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the TIMESTAMP-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByTimestamp (GSRow *row, int32_t column, GSTimestamp fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>GSTimestamp get_field _as_timestamp(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the TIMESTAMP-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsTimestamp (GSRow *row, int32_t column, GSTimestamp
  *fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_blob(int column, bytearray
  value)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the BLOB-type value to the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByBlob (GSRow *row, int32_t column, const GSBlob *fieldValue)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>bytearray get_field_as_blob(int column)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the BLOB-type value in the specified field</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsBlob (GSRow *row, int32_t column, GSBlob *fieldValue)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>ContainerInfo get_schema()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the schema corresponding to the specified Row</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowSchema (GSRow *row, GSContainerInfo *schemaInfo)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td rowspan=21 height=756 class=xl80 width=126 style='border-bottom:.5pt solid black;
  height:567.0pt;border-top:none;width:95pt'>RowKeyPredicate</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>GSType
  get_key_type()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the type of Row key used as a search condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPredicateKeyType (GSRowKeyPredicate *predicate, GSType *keyType)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>string get_start_key_as_string()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the value of the STRING-type Row key at the starting position of the range
  condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPredicateStartKeyAsString (GSRowKeyPredicate *predicate, const GSChar
  **startKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>int get_start_key_as_integer()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the value of the INTEGER-type Row key at the starting position of the range
  condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPredicateStartKeyAsInteger (GSRowKeyPredicate *predicate, const int32_t
  **startKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>long get_start_key_as_long()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the value of the LONG-type Row key at the starting position of the range
  condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPredicateStartKeyAsLong (GSRowKeyPredicate *predicate, const int64_t
  **startKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>GSTimestamp get_start_key_as_timestamp()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the value of the TIMESTAMP-type Row key at the starting position of the range
  condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPredicateStartKeyAsTimestamp (GSRowKeyPredicate *predicate, const
  GSTimestamp **startKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>string get_finish_key_as_string()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the value of the STRING-type Row key at the end position of the range
  condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPredicateFinishKeyAsString (GSRowKeyPredicate *predicate, const GSChar
  **finishKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>int get_finish_key_as_integer()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the value of the INTEGER-type Row key at the end position of the range
  condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPredicateFinishKeyAsInteger (GSRowKeyPredicate *predicate, const int32_t
  **finishKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>long get_finish_key_as_long()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the value of the LONG-type Row key at the end position of the range condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPredicateFinishKeyAsLong (GSRowKeyPredicate *predicate, const int64_t
  **finishKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>GSTimestamp get_finish_key_as_timestamp()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the value of the TIMESTAMP-type Row key at the end position of the range
  condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPredicateFinishKeyAsTimestamp (GSRowKeyPredicate *predicate, const
  GSTimestamp **finishKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_start_key_by_string(string startKey)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the value of the STRING-type Row key as the start position of the range
  conditions</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetPredicateStartKeyByString (GSRowKeyPredicate *predicate, const GSChar
  *startKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_start_key_by_integer(int startKey)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the value of the INTEGER-type Row key as the start position of the range
  conditions</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetPredicateStartKeyByInteger (GSRowKeyPredicate *predicate, const int32_t
  *startKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_start_key_by_long(long startKey)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the value of the LONG-type Row key as the start position of the range
  conditions</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetPredicateStartKeyByLong (GSRowKeyPredicate *predicate, const int64_t
  *startKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_start_key_by_timestamp(GSTimestamp
  startKey)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the value of the TIMESTAMP-type Row key as the start position of the range
  conditions</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetPredicateStartKeyByTimestamp (GSRowKeyPredicate *predicate, const
  GSTimestamp *startKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_finish_key_by_string(string finishKey)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the value of the STRING-type Row key as the end position of the range
  conditions</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetPredicateFinishKeyByString (GSRowKeyPredicate *predicate, const GSChar
  *finishKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_finish_key_by_integer(GSTimestamp
  finishKey)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the value of the INTEGER-type Row key as the end position of the range
  conditions</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetPredicateFinishKeyByInteger (GSRowKeyPredicate *predicate, const int32_t
  *finishKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_finish_key_by_long(long finishKey)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the value of the LONG-type Row key as the end position of the range
  conditions</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetPredicateFinishKeyByLong (GSRowKeyPredicate *predicate, const int64_t
  *finishKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_finish_key_by_timestamp(GSTimestamp
  finishKey)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the value of the TIMESTAMP-type Row key as the end position of the range
  conditions</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetPredicateFinishKeyByTimestamp (GSRowKeyPredicate *predicate, const
  GSTimestamp *finishKey)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void add_key_by_string(string key)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Adds
  the value of the STRING-type Row key as one of the elements in the individual
  condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsAddPredicateKeyByString (GSRowKeyPredicate *predicate, const GSChar *key)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void add_key_by_integer(int key)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Adds
  the value of the INTEGER-type Row key as one of the elements in the
  individual condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsAddPredicateKeyByInteger (GSRowKeyPredicate *predicate, int32_t key)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void add_key_by_long(long key)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Adds
  the value of the LONG-type Row key as one of the elements in the individual
  condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsAddPredicateKeyByLong (GSRowKeyPredicate *predicate, int64_t key)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void add_key_by_timestamp(GSTimestamp key)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Adds
  the value of the TIMESTAMP-type Row key as one of the elements in the
  individual condition</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsAddPredicateKeyByTimestamp (GSRowKeyPredicate *predicate, GSTimestamp key)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td rowspan=7 height=216 class=xl80 width=126 style='border-bottom:.5pt solid black;
  height:162.0pt;border-top:none;width:95pt'>RowSet</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>void
  delete_current()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  the Row at the current cursor position</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteCurrentRow (GSRowSet *rowSet)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void get_next(Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Moves
  the cursor to the next Row in a Row set and returns the Row object at the
  moved position</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetNextRow (GSRowSet *rowSet, void *rowObj)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>AggregationResult get_next_aggregation()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Moves
  the cursor to the next Row in a Row set and returns the aggregation result at
  the moved position</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetNextAggregation (GSRowSet *rowSet, GSAggregationResult
  **aggregationResult)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>GSRowSetType get_type()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the type of Row set</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSRowSetType
  gsGetRowSetType (GSRowSet *rowSet)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>int get_size()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the size of Row set, i.e. the number of Row when a Row set is created</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>int32_t
  gsGetRowSetSize (GSRowSet *rowSet)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>boolean has_next()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  whether a Row set has at least one Row ahead of the current cursor position</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSBool
  gsHasNextRow (GSRowSet *rowSet)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void update_current(Row row)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Updates
  the values except a Row key of the Row at the cursor position, using the
  specified Row object</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsUpdateCurrentRow (GSRowSet *rowSet, const void *rowObj)</td>
 </tr>
 <tr height=90 style='height:67.5pt'>
  <td rowspan=9 height=396 class=xl81 width=126 style='border-bottom:.5pt solid black;
  height:297.0pt;width:95pt'>Store</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>Container
  put_container(string containerName, list&lt;Tuples columnInfo&gt;
  columnInfolist, GSContainerType containerType, boolean modifiable, boolean
  rowKeyAssigned, boolean columnOrderIgnorable, int rowExpirationTime,
  GSTimeUnit rowExpirationTimeUnit, int expirationDivisionCount)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Container with the specified Container properties</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutContainerGeneral (GSGridStore *store, const GSChar *name, const
  GSContainerInfo *info, GSBool modifiable, GSContainer **container)<span
  style='mso-spacerun:yes'>                  </span></td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>Container get_container(string containerName)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  a Container instance whose rows can be processed using a Row object</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetContainerGeneral (GSGridStore *store, const GSChar *name, GSContainer
  **container)<span style='mso-spacerun:yes'>         </span></td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>void drop_container(string containerName)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Delete
  a Container with the specified name</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDropContainer (GSGridStore *store, const GSChar *name)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>ContainerInfo get_container_info(string
  containerName)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  information related to a Container with the specified name</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetContainerInfo (GSGridStore *store, const GSChar *name, GSContainerInfo
  *info, GSBool *exists)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void fetch_all(list queryList)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Query
  execution and fetch is carried out on a specified arbitrary number of Query,
  with the request unit enlarged as much as possible</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsFetchAll (GSGridStore *store, GSQuery *const *queryList, size_t queryCount)</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl70 width=434 style='height:40.5pt;border-top:none;
  border-left:none;width:326pt'>void put_multi_container_row(dict{string
  containerName : list rowList} containerEntry)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>New
  creation or update operation is carried out on an arbitrary number of rows of
  a Container, with the request unit enlarged as much as possible</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutMultipleContainerRows (GSGridStore *store, const GSContainerRowEntry
  *entryList, size_t entryCount)</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl70 width=434 style='height:40.5pt;border-top:none;
  border-left:none;width:326pt'>dict{string containerName : list rowList}
  get_multi_container_row(dict{string containerName : RowKeyPredicate
  predicate} predicateEntry)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  an arbitrary number and range of Rows in any Container based on the specified
  conditions, with the request unit enlarged as much as possible</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetMultipleContainerRows (GSGridStore *store, const GSRowKeyPredicateEntry
  *const *predicateList, size_t predicateCount, const GSContainerRowEntry
  **entryList, size_t *entryCount)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>PartitionController get_partition_controller()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  PartitionController corresponding to GridDB cluster</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionController (GSGridStore *store, GSPartitionController
  **partitionController)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>RowKeyPredicate create_row_key_predicate(GSType
  keyType)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Creates
  a matching condition with the specified GSType as the type of Row key</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsCreateRowKeyPredicate (GSGridStore *store, GSType keyType,
  GSRowKeyPredicate **predicate)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td rowspan=4 height=108 class=xl80 width=126 style='border-bottom:.5pt solid black;
  height:81.0pt;border-top:none;width:95pt'>StoreFactory</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>StoreFactory
  StoreFactory.get_default()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  a default StoreFactory instance</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSGridStoreFactory*
  gsGetDefaultFactory ()</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>Store get_store(dict StoreProperties)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  a Store with the specified properties</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetGridStore (GSGridStoreFactory *factory, const GSPropertyEntry
  *properties, size_t propertyCount, GSGridStore **store)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>void set_properties(list propslist)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Changes
  the settings for specified Factory</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetFactoryProperties (GSGridStoreFactory *factory, const GSPropertyEntry
  *properties, size_t propertyCount)</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl70 width=434 style='height:13.5pt;border-top:none;
  border-left:none;width:326pt'>string get_version()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Return
  the current version of client</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>NA</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td rowspan=4 height=126 class=xl80 width=126 style='border-bottom:.5pt solid black;
  height:94.5pt;border-top:none;width:95pt'>Timestamp</td>
  <td class=xl70 width=434 style='border-top:none;border-left:none;width:326pt'>static
  GSTimestamp current()</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the current time</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSTimestamp
  gsCurrentTime ()</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>static GSTimestamp add_time(GSTimestamp
  timestamp, int amount, GSTimeUnit timeUnit)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Adds
  a specific value to the specified time</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSTimestamp
  gsAddTime (GSTimestamp timestamp, int32_t amount, GSTimeUnit timeUnit)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>static string format_time(GSTimestamp
  timestamp, int bufSize)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the string representing the specified time, according to the TIMESTAMP value
  notation of TQL</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>size_t
  gsFormatTime (GSTimestamp timestamp, GSChar *strBuf, size_t bufSize)</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl70 width=434 style='height:27.0pt;border-top:none;
  border-left:none;width:326pt'>static GSTimestamp parse(string str)</td>
  <td class=xl70 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the GSTimestampa value corresponding to the specified string, according to
  the TIMESTAMP value notation of TQL</td>
  <td class=xl70 width=523 style='border-top:none;border-left:none;width:392pt'>GSBool
  gsParseTime (const GSChar *str, GSTimestamp *timestamp)</td>
 </tr>
 <![if supportMisalignedColumns]>
 <tr height=0 style='display:none'>
  <td width=126 style='width:95pt'></td>
  <td width=434 style='width:326pt'></td>
  <td width=454 style='width:341pt'></td>
  <td width=523 style='width:392pt'></td>
 </tr>
 <![endif]>
</table>

</body>

</html>
